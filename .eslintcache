[{"E:\\Coding\\TipCalculator\\src\\index.js":"1","E:\\Coding\\TipCalculator\\src\\App.js":"2","E:\\Coding\\TipCalculator\\src\\components\\Bill\\BillCalculation.js":"3","E:\\Coding\\TipCalculator\\src\\components\\UI\\Button\\Button.js":"4","E:\\Coding\\TipCalculator\\src\\components\\UI\\Card\\Card.js":"5","E:\\Coding\\TipCalculator\\src\\components\\Bill\\Result.js":"6"},{"size":169,"mtime":1616529741000,"results":"7","hashOfConfig":"8"},{"size":835,"mtime":1641155523878,"results":"9","hashOfConfig":"8"},{"size":4458,"mtime":1641157557136,"results":"10","hashOfConfig":"8"},{"size":384,"mtime":1641151559951,"results":"11","hashOfConfig":"8"},{"size":197,"mtime":1639689076977,"results":"12","hashOfConfig":"8"},{"size":805,"mtime":1641151621025,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"7thnoa",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"E:\\Coding\\TipCalculator\\src\\index.js",[],["28","29"],"E:\\Coding\\TipCalculator\\src\\App.js",[],"E:\\Coding\\TipCalculator\\src\\components\\Bill\\BillCalculation.js",["30","31","32"],"import { useEffect, useState } from \"react\";\r\nimport PersonIcon from \"../../img/icon-person.svg\"\r\nimport Button from \"../UI/Button/Button\";\r\nimport classes from \"./BillCalculation.module.css\";\r\nconst BillCalculation = (props) => {\r\n  const [bill, setBill] = useState(\"0.00\");\r\n  const [peopleCount, setPeopleCount] = useState(\"1\");\r\n  const [tipPercentage, setTipPercentage] = useState(\"0\");\r\n  const [customPercentage, setCustomPercentage] = useState(\"Custom\");\r\n  const [pressed, setPressed] = useState();\r\n  const [error, setError] = useState();\r\n  const [isError, setIsError] = useState(\"\");\r\n  const [isResetable, setIsResetable] = useState(false);\r\n\r\n  const billHandler = (event) => {\r\n    if (event.target.value < 0) {\r\n      setError(\"Bill cannot be lower than $0.00\");\r\n      setBill(\"0\");\r\n      setIsError(\"bill\");\r\n    } else {\r\n      setBill(event.target.value);\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const peopleAmountHandler = (event) => {\r\n    if (event.target.value < 1) {\r\n      setError(`Can't be lower than one`);\r\n      setPeopleCount(\"0\");\r\n      setIsError(\"people\");\r\n    } else {\r\n      setPeopleCount(event.target.value);\r\n    }\r\n  };\r\n\r\n  const tipPercentageHandler = (event) => {\r\n    setTipPercentage(event.target.value);\r\n    setPressed(\"pressed\");\r\n    setCustomPercentage(\"Custom\");\r\n  };\r\n\r\n  const customPercentageHandler = (event) => {\r\n    setCustomPercentage(event.target.value);\r\n    setTipPercentage(event.target.value / 100);\r\n    setPressed(\"pressed\");\r\n  };\r\n\r\n  const customPercentageResetHandler = () => {\r\n    if (customPercentage === \"Custom\") {\r\n      setCustomPercentage(\"\");\r\n      setPressed(\"pressed\");\r\n      setTipPercentage(null);\r\n    }\r\n\r\n    if (customPercentage === \"\") {\r\n      setCustomPercentage(\"Custom\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(props.resetData);\r\n    setBill(\"0.00\");\r\n    setPeopleCount(\"1\");\r\n    setTipPercentage(\"0\");\r\n    setCustomPercentage(\"Custom\");\r\n    setPressed(null);\r\n    setError(null);\r\n  }, [props.resetData]);\r\n\r\n  useEffect(() => {\r\n    const data = {\r\n      total: ((bill * (1 + Number(tipPercentage))) / peopleCount).toFixed(2),\r\n      tip: ((Number(bill) * Number(tipPercentage)) / peopleCount)\r\n        .toFixed(2)\r\n        .toString(),\r\n    };\r\n\r\n    props.onBillChange(data);\r\n  }, [bill, tipPercentage, peopleCount, props]);\r\n\r\n  return (\r\n    <form className={classes.bill}>\r\n      <label>Bill {isError === \"bill\" && error}</label>\r\n      <input\r\n        onChange={billHandler}\r\n        type=\"number\"\r\n        value={bill}\r\n        step=\"0.01\"\r\n        min=\"0\"\r\n        className={error && classes.error}\r\n      ></input>\r\n      <label>Select Tip %</label>\r\n      <div className={classes.buttons}>\r\n        <Button\r\n          value=\"0.05\"\r\n          onClick={tipPercentageHandler}\r\n          className={tipPercentage === \"0.05\" && pressed}\r\n        >\r\n          5%\r\n        </Button>\r\n        <Button\r\n          value=\"0.1\"\r\n          onClick={tipPercentageHandler}\r\n          className={tipPercentage === \"0.1\" && pressed}\r\n        >\r\n          10%\r\n        </Button>\r\n        <Button\r\n          value=\"0.15\"\r\n          onClick={tipPercentageHandler}\r\n          className={tipPercentage === \"0.15\" && pressed}\r\n        >\r\n          15%\r\n        </Button>\r\n        <Button\r\n          value=\"0.25\"\r\n          onClick={tipPercentageHandler}\r\n          className={tipPercentage === \"0.25\" && pressed}\r\n        >\r\n          25%\r\n        </Button>\r\n        <Button\r\n          value=\"0.50\"\r\n          onClick={tipPercentageHandler}\r\n          className={tipPercentage === \"0.50\" && pressed}\r\n        >\r\n          50%\r\n        </Button>\r\n        <Button\r\n          value={customPercentage}\r\n          className={\r\n            (customPercentage !== \"Custom\" && pressed) ||\r\n            (customPercentage === \"\" && pressed)\r\n          }\r\n        >\r\n          <input\r\n            value={customPercentage}\r\n            onChange={customPercentageHandler}\r\n            onFocus={customPercentageResetHandler}\r\n            onBlur={customPercentageResetHandler}\r\n          ></input>\r\n        </Button>\r\n      </div>\r\n      <label>Number of People {isError === \"people\" && error}</label>\r\n\r\n      <input\r\n        onChange={peopleAmountHandler}\r\n        type=\"number\"\r\n        value={peopleCount}\r\n        step=\"1\"\r\n        min=\"1\"\r\n        className={error && classes.error}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BillCalculation;\r\n","E:\\Coding\\TipCalculator\\src\\components\\UI\\Button\\Button.js",[],"E:\\Coding\\TipCalculator\\src\\components\\UI\\Card\\Card.js",[],"E:\\Coding\\TipCalculator\\src\\components\\Bill\\Result.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":18},{"ruleId":"37","severity":1,"message":"41","line":13,"column":10,"nodeType":"39","messageId":"40","endLine":13,"endColumn":21},{"ruleId":"37","severity":1,"message":"42","line":13,"column":23,"nodeType":"39","messageId":"40","endLine":13,"endColumn":37},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'PersonIcon' is defined but never used.","Identifier","unusedVar","'isResetable' is assigned a value but never used.","'setIsResetable' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]